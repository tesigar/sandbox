// Generated by CoffeeScript 1.4.0
var $, Gakugaku,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = jQuery;

Gakugaku = (function() {

  Gakugaku.prototype.shake = function(obj) {
    var r, xpos, ypos;
    xpos = (Math.random() - 0.5) * this.xdepth;
    ypos = (Math.random() - 0.5) * this.ydepth;
    r = (Math.random() - 0.5) * this.tilt;
    obj.transition({
      x: xpos + 'px',
      y: ypos + 'px'
    });
    return obj.find("span.tilt").transition({
      rotate: r + 'deg'
    });
  };

  function Gakugaku() {
    this.shake = __bind(this.shake, this);

    var base, container, f, msgary, spans, vars,
      _this = this;
    vars = getUrlVars();
    if (!("m" in vars)) {
      $("#divBase").hide();
      return false;
    }
    $("#divForm").hide();
    this.msg = decodeURIComponent(vars["m"]);
    this.mode = vars["t"];
    this.size = parseFloat(vars["s"]);
    this.spacing = parseFloat(vars["p"]);
    this.lspacing = parseFloat(vars["l"]);
    this.fgcolor = decodeURIComponent(vars["c"]);
    this.bgcolor = decodeURIComponent(vars["b"]);
    this.xdepth = parseFloat(vars["x"]);
    this.ydepth = parseFloat(vars["y"]);
    this.tilt = parseFloat(vars["r"]);
    this.frequency = parseFloat(vars["f"]);
    f = $("#divForm").find("form");
    f.find("textarea[name='m']").text(this.msg);
    f.find("input[name='t'][value='" + this.mode + "']").attr("checked", "checked");
    f.find("input[name='s']").val(this.size);
    f.find("input[name='p']").val(this.spacing);
    f.find("input[name='l']").val(this.lspacing);
    f.find("input[name='c']").val(this.fgcolor);
    f.find("input[name='b']").val(this.bgcolor);
    f.find("input[name='x']").val(this.xdepth);
    f.find("input[name='y']").val(this.ydepth);
    f.find("input[name='r']").val(this.tilt);
    f.find("input[name='f']").val(this.frequency);
    this.frequency *= 1000;
    switch (this.mode) {
      case "w":
        msgary = [this.msg.replace(/\n/g, "<BR>")];
        break;
      case "l":
        msgary = this.msg.split("\n");
        msgary = $.map(msgary, function(node, index) {
          return [node, "\n"];
        });
        break;
      default:
        msgary = this.msg.split("");
    }
    base = $("#divBase");
    base.css("background-color", this.bgcolor);
    base.css("color", this.fgcolor);
    base.css("font-size", this.size + "px");
    container = $("#divContainer");
    $.each(msgary, function(idx, str) {
      var span;
      if (str === "\n") {
        span = $("<br />");
      } else {
        span = $("<span class='pos'><span class='tilt'>" + str + "</span></span>");
      }
      return container.append(span);
    });
    spans = container.find("span.pos");
    spans.css("margin-right", this.spacing + "px");
    container.css("line-height", (this.size + this.lspacing) + "px");
    spans.each(function(idx, obj) {
      return setInterval(function() {
        return _this.shake($(obj));
      }, _this.frequency);
    });
    $("#divBase").bind("dblclick", function() {
      $("#divBase").hide();
      return $("#divForm").show();
    });
  }

  return Gakugaku;

})();

$(function() {
  $.fx.speeds._default = 0;
  return Gakugaku = new Gakugaku;
});
